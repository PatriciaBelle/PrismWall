/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PrismWallInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "artworkInfo"
      | "balanceOf"
      | "castReaction"
      | "fetchCipherReactions"
      | "fetchNote"
      | "forgeArtworkNFT"
      | "getAllArtworks"
      | "getApproved"
      | "getEncryptedApplause"
      | "isApprovedForAll"
      | "name"
      | "notesCount"
      | "ownerOf"
      | "postNote"
      | "protocolId"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "sendApplause"
      | "setApprovalForAll"
      | "supportsInterface"
      | "symbol"
      | "tipArtist"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "ArtistTipped"
      | "ArtworkForged"
      | "NoteAdded"
      | "ReactionCast"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "artworkInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "castReaction",
    values: [BytesLike, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchCipherReactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchNote",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forgeArtworkNFT",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllArtworks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedApplause",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "notesCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "postNote",
    values: [BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendApplause",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tipArtist",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "artworkInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castReaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchCipherReactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fetchNote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forgeArtworkNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllArtworks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedApplause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "notesCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "postNote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendApplause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tipArtist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ArtistTippedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    from: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [tokenId: bigint, from: string, amount: bigint];
  export interface OutputObject {
    tokenId: bigint;
    from: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ArtworkForgedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    author: AddressLike,
    uri: string
  ];
  export type OutputTuple = [tokenId: bigint, author: string, uri: string];
  export interface OutputObject {
    tokenId: bigint;
    author: string;
    uri: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NoteAddedEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    author: AddressLike,
    uri: string,
    encrypted: boolean
  ];
  export type OutputTuple = [
    tokenId: bigint,
    author: string,
    uri: string,
    encrypted: boolean
  ];
  export interface OutputObject {
    tokenId: bigint;
    author: string;
    uri: string;
    encrypted: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReactionCastEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    user: AddressLike,
    kind: BigNumberish
  ];
  export type OutputTuple = [tokenId: bigint, user: string, kind: bigint];
  export interface OutputObject {
    tokenId: bigint;
    user: string;
    kind: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PrismWall extends BaseContract {
  connect(runner?: ContractRunner | null): PrismWall;
  waitForDeployment(): Promise<this>;

  interface: PrismWallInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  artworkInfo: TypedContractMethod<
    [tokenId: BigNumberish],
    [[string, string, string]],
    "view"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  castReaction: TypedContractMethod<
    [
      encryptedOne: BytesLike,
      inputProof: BytesLike,
      tokenId: BigNumberish,
      kind: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  fetchCipherReactions: TypedContractMethod<
    [tokenId: BigNumberish],
    [[string, string, string, string]],
    "view"
  >;

  fetchNote: TypedContractMethod<
    [tokenId: BigNumberish, index: BigNumberish],
    [[string, string, boolean, bigint]],
    "view"
  >;

  forgeArtworkNFT: TypedContractMethod<
    [uri: string, arg1: string],
    [bigint],
    "nonpayable"
  >;

  getAllArtworks: TypedContractMethod<
    [],
    [
      [string[], string[], string[], string[]] & {
        uris: string[];
        authors: string[];
        owners: string[];
        applause: string[];
      }
    ],
    "view"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getEncryptedApplause: TypedContractMethod<
    [tokenId: BigNumberish],
    [string],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  notesCount: TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  postNote: TypedContractMethod<
    [tokenId: BigNumberish, uri: string, encrypted: boolean],
    [void],
    "nonpayable"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  sendApplause: TypedContractMethod<
    [encryptedOne: BytesLike, inputProof: BytesLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tipArtist: TypedContractMethod<[tokenId: BigNumberish], [void], "payable">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "artworkInfo"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [[string, string, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "castReaction"
  ): TypedContractMethod<
    [
      encryptedOne: BytesLike,
      inputProof: BytesLike,
      tokenId: BigNumberish,
      kind: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fetchCipherReactions"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [[string, string, string, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "fetchNote"
  ): TypedContractMethod<
    [tokenId: BigNumberish, index: BigNumberish],
    [[string, string, boolean, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "forgeArtworkNFT"
  ): TypedContractMethod<[uri: string, arg1: string], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllArtworks"
  ): TypedContractMethod<
    [],
    [
      [string[], string[], string[], string[]] & {
        uris: string[];
        authors: string[];
        owners: string[];
        applause: string[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getEncryptedApplause"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "notesCount"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "postNote"
  ): TypedContractMethod<
    [tokenId: BigNumberish, uri: string, encrypted: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendApplause"
  ): TypedContractMethod<
    [encryptedOne: BytesLike, inputProof: BytesLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tipArtist"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "ArtistTipped"
  ): TypedContractEvent<
    ArtistTippedEvent.InputTuple,
    ArtistTippedEvent.OutputTuple,
    ArtistTippedEvent.OutputObject
  >;
  getEvent(
    key: "ArtworkForged"
  ): TypedContractEvent<
    ArtworkForgedEvent.InputTuple,
    ArtworkForgedEvent.OutputTuple,
    ArtworkForgedEvent.OutputObject
  >;
  getEvent(
    key: "NoteAdded"
  ): TypedContractEvent<
    NoteAddedEvent.InputTuple,
    NoteAddedEvent.OutputTuple,
    NoteAddedEvent.OutputObject
  >;
  getEvent(
    key: "ReactionCast"
  ): TypedContractEvent<
    ReactionCastEvent.InputTuple,
    ReactionCastEvent.OutputTuple,
    ReactionCastEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "ArtistTipped(uint256,address,uint256)": TypedContractEvent<
      ArtistTippedEvent.InputTuple,
      ArtistTippedEvent.OutputTuple,
      ArtistTippedEvent.OutputObject
    >;
    ArtistTipped: TypedContractEvent<
      ArtistTippedEvent.InputTuple,
      ArtistTippedEvent.OutputTuple,
      ArtistTippedEvent.OutputObject
    >;

    "ArtworkForged(uint256,address,string)": TypedContractEvent<
      ArtworkForgedEvent.InputTuple,
      ArtworkForgedEvent.OutputTuple,
      ArtworkForgedEvent.OutputObject
    >;
    ArtworkForged: TypedContractEvent<
      ArtworkForgedEvent.InputTuple,
      ArtworkForgedEvent.OutputTuple,
      ArtworkForgedEvent.OutputObject
    >;

    "NoteAdded(uint256,address,string,bool)": TypedContractEvent<
      NoteAddedEvent.InputTuple,
      NoteAddedEvent.OutputTuple,
      NoteAddedEvent.OutputObject
    >;
    NoteAdded: TypedContractEvent<
      NoteAddedEvent.InputTuple,
      NoteAddedEvent.OutputTuple,
      NoteAddedEvent.OutputObject
    >;

    "ReactionCast(uint256,address,uint8)": TypedContractEvent<
      ReactionCastEvent.InputTuple,
      ReactionCastEvent.OutputTuple,
      ReactionCastEvent.OutputObject
    >;
    ReactionCast: TypedContractEvent<
      ReactionCastEvent.InputTuple,
      ReactionCastEvent.OutputTuple,
      ReactionCastEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
